{"version":3,"sources":["components/ImageCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","className","onClick","handleClick","id","class","alt","src","image","Wrapper","children","Title","App","newCard","state","images","map","undefined","clicked","setState","score","topScore","sort","Math","random","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"42DAkBeA,MAdf,SAAmBC,GACf,OACI,yBAAKC,UAAU,OAAQC,QAAW,WAC9BF,EAAMG,YAAYH,EAAMI,MAExB,yBAAKH,UAAU,iBACX,yBAAKI,MAAM,eAAeD,GAAG,UAAUE,IAAI,OAAOC,IAAKP,EAAMQ,W,MCH9DC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCM1BC,MALf,SAAeX,GACf,OAAQ,yBAAKC,UAAU,qBAAqBD,EAAMU,W,OCoFnCE,E,kDAlFb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAQRG,YAAc,SAAAC,GACZ,IAAIS,EAAU,EAAKC,MAAMC,OAAOC,KAAI,SAAAR,GAuBlC,OAtBIJ,IAAOI,EAAMJ,UACOa,IAAlBT,EAAMU,SACR,EAAKC,SAAS,CACZC,MAAO,EAAKN,MAAMM,MAAQ,IAG5BZ,EAAMU,SAAU,EACZ,EAAKJ,MAAMM,OAAS,EAAKN,MAAMO,UACjC,EAAKF,SAAS,CACZE,SAAU,EAAKP,MAAMO,SAAW,KAKpC,EAAKF,SAAS,CACZC,MAAO,KAONZ,KAETK,EAAUA,EAAQS,MAAK,kBACrBC,KAAKC,SAAW,MAEO,IAArB,EAAKV,MAAMM,QACbP,EAAUA,EAAQG,KAAI,SAAAR,GAEpB,OADAA,EAAMU,aAAUD,EACTT,MAKX,EAAKW,SAAS,CACZJ,OAAQF,KA7CV,EAAKC,MAAQ,CACXC,OAAQA,EACRK,MAAO,EACPC,SAAU,GALK,E,qDAmDT,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,SAAQ,wBAAIpB,UAAU,+BAAd,cACZ,wBAAIA,UAAU,2BACV,sCAAYwB,KAAKX,MAAMM,OACvB,iCACA,yCAAeK,KAAKX,MAAMO,YAE1B,yBAAKpB,UAAU,OACZwB,KAAKX,MAAMC,OAAOC,KAAI,SAAAR,GACrB,OAEE,yBAAKP,UAAU,YACb,kBAAC,EAAD,CAAWE,YAAa,EAAKA,YAC3BK,MAAOA,EAAMA,MAAOJ,GAAII,EAAMJ,e,GAnE9BsB,aCMEC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.913219f4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction ImageCard(props) {\r\n    return (\r\n        <div className=\"card\"  onClick = {()=> {\r\n            props.handleClick(props.id)\r\n        }}>\r\n            <div className=\"img-container\">\r\n                <img class=\"img-card-top\" id=\"imgCard\" alt=\"test\" src={props.image}  />\r\n            </div>\r\n            \r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","  \r\nimport React from 'react';\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Title(props) {\r\nreturn (<nav className=\"navbar bg-success\">{props.children}</nav>)\r\n\r\n}\r\n\r\nexport default Title;","import React, { Component } from \"react\";\r\nimport './App.css';\r\nimport ImageCard from \"./components/ImageCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Title from \"./components/Title\";\r\nimport images from \"./images.json\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      images: images,\r\n      score: 0,\r\n      topScore: 0\r\n\r\n    }\r\n  }\r\n  handleClick = id => {\r\n    let newCard = this.state.images.map(image => {\r\n      if (id === image.id) {\r\n        if (image.clicked === undefined) {\r\n          this.setState({\r\n            score: this.state.score + 1\r\n          })\r\n\r\n          image.clicked = true;\r\n          if (this.state.score >= this.state.topScore) {\r\n            this.setState({\r\n              topScore: this.state.topScore + 1\r\n            })\r\n          }\r\n        }\r\n        else {\r\n          this.setState({\r\n            score: 0\r\n          })\r\n        }\r\n\r\n      }\r\n\r\n\r\n      return image;\r\n    })\r\n    newCard = newCard.sort(() => (\r\n      Math.random() - 0.5\r\n    ))\r\n    if (this.state.score === 0) {\r\n      newCard = newCard.map(image => {\r\n        image.clicked = undefined\r\n        return image\r\n      })\r\n    }\r\n\r\n\r\n    this.setState({\r\n      images: newCard\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Title> <h3 className=\" nav justify-content-center\" >ClickyGame</h3>\r\n    <ul className=\"nav justify-content-end\">\r\n        <li>Score: {this.state.score}</li>\r\n        <li>|</li>\r\n        <li>TopScore: {this.state.topScore}</li></ul>\r\n        </Title> \r\n        <div className=\"row\">\r\n          {this.state.images.map(image => {\r\n            return (\r\n\r\n              <div className=\"col-sm-3\">\r\n                <ImageCard handleClick={this.handleClick}\r\n                  image={image.image} id={image.id} />\r\n              </div>\r\n            )\r\n\r\n          })}\r\n        </div>\r\n\r\n      </Wrapper>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","  \r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}